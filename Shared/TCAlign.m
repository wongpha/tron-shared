%% TIMECOURSE ALIGNMENT SCRIPT V1 [Alvin Wong, National University of Singapore]
% This script imports raw within-ROI MR timecourse values generated by
% TCExtract and builds a database that organises each generated timecourse
% by subject ID, ROI, and other metadata values based on a given filename
% scheme (currently it is defined as <subject id>_<run number>_<hemisphere>_
% <ROI label>.txt). 
% 
% It also matches MR timecourses with corresponding event
% parameters in CSV format, categorises imported timecourses by ROI,
% converts event onsets from seconds to TRs and a couple of other minor
% steps specific to our project.

clearvars();
maindirectory = cd('/home/wongalvin/storage/SHARED_PROJECTS/BOLD6/PREPROC/'); % Specify directory containing subfolders where data resides
registry = dir('BOLD*/vol/*.txt'); % Main index of everything

%% IMPORT AND ORGANISE DATA
for regid = 1:numel(registry) % Step through each timecourse file
    PATH = sprintf('%s', [registry(regid).folder, '/' , registry(regid).name]);
    PARAMS{regid} = split(registry(regid).name, '_');
    SID{regid} = PARAMS{regid}{1}; % Subject ID
    RUN{regid} = PARAMS{regid}{2}; % Run ID
    HEM{regid} = PARAMS{regid}{3}; % L/R position of ROI
    ROI{regid} = PARAMS{regid}{4}; % ROI label
    DATA{regid} = importdata(PATH); % Raw data
    %EVENTPATH{regid} = dir(sprintf('%s', [registry(regid).folder(1,1:end-4),... 
        %'/bev/', '*', PARAMS{regid}{2}, '.csv'])); % Looks for corresponding event CSV based on run ID
    EVENTPATH{regid} = dir(sprintf('%s', [registry(regid).folder(1,1:end-4),... 
        '/bev/', '*', '.csv']));
    FILEIDTOCHOOSE = str2num(PARAMS{regid}{2}(4:end)) - 2;
    EVENTFILE{regid} = sprintf('%s', [EVENTPATH{regid}(FILEIDTOCHOOSE).folder, '/', EVENTPATH{regid}(FILEIDTOCHOOSE).name]); %sprintf('%s', [EVENTPATH{regid}.folder, '/', EVENTPATH{regid}.name]);
    
    EVENTDATA{regid} = readtable(EVENTFILE{regid}); % Parse contents of event CSV
    VSTARTSEC{regid} = table2array(EVENTDATA{regid}(1:end,6)); % Visual stimulus onset (seconds)
    VLENGTH{regid} = table2array(EVENTDATA{regid}(1:end,7)); % Visual stimulus duration (IV1)
    VINTENS{regid} = table2array(EVENTDATA{regid}(1:end,8)); % Visual stimulus intensity (IV2)
    
    ASTARTSEC{regid} = table2array(EVENTDATA{regid}(1:end,10)); % Auditory stimulus onset (seconds)
    ALENGTH{regid} = table2array(EVENTDATA{regid}(1:end,11)); % Auditory stimulus duration (IV1)
    AINTENS{regid} = table2array(EVENTDATA{regid}(1:end,12)); % Auditory stimulus intensity (IV2)
    
    %RESPTIME{regid} = table2array(EVENTDATA{regid}(1:end,13)); % Recorded motor response time
    %RESPTIME{regid} = char(RESPTIME{regid});
    %RESPTIME{regid} = RESPTIME{regid}(1:end, 35:42); % Remove unnecessary characters from each field
    %RESPTIME{regid} = string(RESPTIME{regid});
    %RESPTIME{regid} = str2double(RESPTIME{regid}(1:end));
    
end
%% BUILD BIG KAHUNA MATRIX
BigKahunaMatrix = struct('SID', SID, 'RUN', RUN, 'HEM', HEM, 'ROI', ROI, 'DATA', DATA,...
    'VSTARTSEC', VSTARTSEC, 'VLENGTH', VLENGTH, 'VINTENS', VINTENS,...
    'ASTARTSEC', ASTARTSEC, 'ALENGTH', ALENGTH, 'AINTENS', AINTENS);
    %'RESPTIME', RESPTIME); % Massive matrix of everything
save('BigKahunaMatrix2.mat', 'BigKahunaMatrix', '-mat');
clearvars();
load('BigKahunaMatrix2.mat'); % Dirty way of saving memory and hopefully not crashing

%% CATEGORISE DATA INTO SMALLER MATRICES BY TIMECOURSE TYPE
for dataid = 1:numel(BigKahunaMatrix)
    if BigKahunaMatrix(dataid).ROI == "A1.txt" % Build sets of auditory TCs
        AuditorySets{dataid} = struct('HEM', BigKahunaMatrix(dataid).HEM, 'DATA', BigKahunaMatrix(dataid).DATA,...
            'ASTARTSEC', BigKahunaMatrix(dataid).ASTARTSEC, 'ALENGTH', BigKahunaMatrix(dataid).ALENGTH,... 
            'AINTENS', BigKahunaMatrix(dataid).AINTENS);
    %elseif BigKahunaMatrix(dataid).ROI == "M1" % Build sets of motor TCs
        %MotorSets{dataid} = struct('HEM', BigKahunaMatrix(dataid).HEM, 'DATA', BigKahunaMatrix(dataid).DATA,... 
            %'ASTARTSEC', BigKahunaMatrix(dataid).ASTARTSEC, 'RESPTIME', BigKahunaMatrix(dataid).RESPTIME);
    elseif BigKahunaMatrix(dataid).ROI == "V1.txt" % Build sets of visual TCs
        VisualSets{dataid} = struct('HEM', BigKahunaMatrix(dataid).HEM, 'DATA', BigKahunaMatrix(dataid).DATA,... 
            'VSTARTSEC', BigKahunaMatrix(dataid).VSTARTSEC, 'VLENGTH', BigKahunaMatrix(dataid).VLENGTH,...
            'VINTENS', BigKahunaMatrix(dataid).VINTENS);
    end
end

AuditorySets = AuditorySets(~cellfun('isempty',AuditorySets)); % Remove empty columns from sets
%MotorSets = MotorSets(~cellfun('isempty',MotorSets));
VisualSets = VisualSets(~cellfun('isempty',VisualSets));

allruns = numel(VisualSets);

% Initialise event matrix for each event type
AuditoryEvents = cell(1, numel(AuditorySets)*numel(AuditorySets{allruns}.ASTARTSEC));
VisualEvents = cell(1, numel(VisualSets)*numel(VisualSets{allruns}.VSTARTSEC));
%MotorEvents = cell(1, numel(MotorSets)*numel(MotorSets{allruns}.ASTARTSEC));

%% ALIGN TIMECOURSES TO EVENT ONSETS
for allruns = 1:numel(VisualSets)
    for timingid = 1:numel(VisualSets{allruns}.VSTARTSEC)
        % TR for this project is 0.625
        AuditorySets{allruns}.ASTARTVOL(timingid) = AuditorySets{allruns}.ASTARTSEC(timingid) / 1 + 1; %0.625 + 1;
        %MotorSets{allruns}.RSTARTVOL(timingid) = MotorSets{allruns}.ASTARTSEC(timingid) / 0.625 + 1;
        %MotorSets{allruns}.RESPTIMEVOL(timingid) = MotorSets{allruns}.RESPTIME(timingid) / 0.625 + 1;
        VisualSets{allruns}.VSTARTVOL(timingid) = VisualSets{allruns}.VSTARTSEC(timingid) / 1 + 1; %0.625 + 1;
        
        % Account for removal of first 4 volumes during functional data
        % pre-processing
        AuditorySets{allruns}.ASTARTVOL(timingid) = round(AuditorySets{allruns}.ASTARTVOL(timingid), 0) - 4;
        %MotorSets{allruns}.RSTARTVOL(timingid) = floor(MotorSets{allruns}.RSTARTVOL(timingid)) - 4;
        VisualSets{allruns}.VSTARTVOL(timingid) = round(VisualSets{allruns}.VSTARTVOL(timingid), 0) - 4;
        
        % Extract segments of overall timecourse spanning 10 volumes before
        % and 30 volumes after each event onset
        AuditorySets{allruns}.Timecourse{timingid} = AuditorySets{allruns}.DATA...
            (AuditorySets{allruns}.ASTARTVOL(timingid)-5:AuditorySets{allruns}.ASTARTVOL(timingid)+15);
        VisualSets{allruns}.Timecourse{timingid} = VisualSets{allruns}.DATA...
            (VisualSets{allruns}.VSTARTVOL(timingid)-5:VisualSets{allruns}.VSTARTVOL(timingid)+15);
        %MotorSets{allruns}.Timecourse{timingid} = MotorSets{allruns}.DATA...
            %(MotorSets{allruns}.RSTARTVOL(timingid)-10:MotorSets{allruns}.RSTARTVOL(timingid)+30);
    end
end
%% FILL EVENT MATRICES FOR EACH EVENT TYPE
for allruns = 1:numel(AuditorySets)
    for eventblock = 1:numel(AuditorySets{allruns}.ALENGTH)
        AuditoryEvents{1}{allruns,eventblock} = AuditorySets{allruns}.HEM;
        AuditoryEvents{2}{allruns,eventblock} = AuditorySets{allruns}.ALENGTH(eventblock);
        AuditoryEvents{3}{allruns,eventblock} = round(AuditorySets{allruns}.AINTENS(eventblock),1);
        AuditoryEvents{4}{allruns,eventblock} = AuditorySets{allruns}.Timecourse{eventblock};
    end
end

for allruns = 1:numel(VisualSets)
    for eventblock = 1:numel(VisualSets{allruns}.VLENGTH)
        VisualEvents{1}{allruns,eventblock} = VisualSets{allruns}.HEM;
        VisualEvents{2}{allruns,eventblock} = VisualSets{allruns}.VLENGTH(eventblock);
        VisualEvents{3}{allruns,eventblock} = VisualSets{allruns}.VINTENS(eventblock);
        VisualEvents{4}{allruns,eventblock} = VisualSets{allruns}.Timecourse{eventblock};
    end
end

% for allruns = 1:numel(MotorSets)
%     for eventblock = 1:numel(MotorSets{1}.ASTARTSEC)
%         MotorEvents{1}{allruns,eventblock} = MotorSets{allruns}.HEM;
%         MotorEvents{2}{allruns,eventblock} = MotorSets{allruns}.RSTARTVOL(eventblock);
%         MotorEvents{3}{allruns,eventblock} = MotorSets{allruns}.RESPTIME(eventblock);
%         MotorEvents{4}{allruns,eventblock} = MotorSets{allruns}.Timecourse{eventblock};
%     end
% end
%% CLEAN UP EVENT MATRICES AND SAVE TO DIRECTORY
AuditoryEvents(:, any(cellfun(@isempty, AuditoryEvents), 1)) = [];
VisualEvents(:, any(cellfun(@isempty, VisualEvents), 1)) = [];
%MotorEvents(:, any(cellfun(@isempty, MotorEvents), 1)) = [];
%MotorNaN = cellfun(@(x) all(isnan(x)),MotorEvents);
% for NaNidx = 1:size(MotorEvents, 2)
%     if MotorNaN(3,NaNidx) == 1
%         MotorEvents{3,NaNidx} = [];
%     end
% end
% MotorEvents(:, any(cellfun(@isempty, MotorEvents), 1)) = [];

%save('AuditoryEvents', 'AuditoryEvents');
%save('VisualEvents', 'VisualEvents');
%save('MotorEvents', 'MotorEvents');